"""
Django settings for calipsoplus project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import json
import logging
import os

from django.core.management.utils import get_random_secret_key

logger = logging.getLogger(__name__)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Base settings. Do not use directly (import this file in your environment setting, eg: settings_local.py)
# Make sure you check your production checkings
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# Load secret key
SECRET_DIR = os.path.join(BASE_DIR, '..', 'config', 'secrets')
SECRET_FILE = os.path.join(SECRET_DIR, 'secret_key.cnf')

try:
    SECRET_KEY = open(SECRET_FILE).read().strip()
except Exception:
    # If the file doesn't exist, make it
    try:
        os.makedirs(SECRET_DIR, exist_ok=True)
        f = open(SECRET_FILE, 'w+')
        f.write(get_random_secret_key())
        f.close()
        SECRET_KEY = open(SECRET_FILE).read().strip()
    except Exception as e:
        raise Exception('Cannot open file `%s` for writing.' % SECRET_FILE)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'simple_history',
    'django_filters',
    'apprest.apps.ApprestConfig',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mozilla_django_oidc',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
]

ROOT_URLCONF = 'calipsoplus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'calipsoplus.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASE_DIR = os.path.join(BASE_DIR, 'database_data')
os.makedirs(DATABASE_DIR, exist_ok=True)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(DATABASE_DIR, 'calipsoplus.sqlite3')
    },
    'guacamole': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(DATABASE_DIR, 'guacamole.sqlite3')
    }
}

DATABASE_ROUTERS = ['calipsoplus.router.CalipsoPlusDBRouter']

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# logs
LOG_PATH = os.path.join(BASE_DIR, '..', 'logs')
if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)
        
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'calipsoplus.log').replace('\\\\', '\\'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
        },
        'django_cron': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
        'apprest': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
        'mozilla_django_oidc': {
            'handlers': ['console'],
            'level': 'DEBUG'
        },
    }
}

# fixtures
FIXTURE_DIRS = {
    os.path.join(BASE_DIR, 'apprest', 'tests', 'fixtures')
}

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'apprest.views.auth.ExternalServiceAuthenticationBackend',
    'apprest.views.auth_umbrella.ExternalUmbrellaServiceAuthenticationBackend',
    'apprest.openidconnect.username_helper.MyOIDCAB'
)

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny',),
}

# Credentials to interact with Local Auth provider
try:
    data = open(os.path.join(BASE_DIR, '..', 'config/auth',
                             'local_auth.cnf')).read()  # opens the json file and saves the raw contents
    access_conf = json.loads(data)
except Exception as e:
    logging.error(e)
    access_conf = {'host': '', 'username': '', 'password': ''}

LOCAL_ACCESS_USERNAME = access_conf['username']
LOCAL_ACCESS_PASSWORD = access_conf['password']

CORS_ALLOW_CREDENTIALS = True

# Open ID Connect Enabled
OIDC_ENABLED = False
# Open ID Connect credentials
OIDC_RP_CLIENT_ID = ''
OIDC_RP_CLIENT_SECRET = ''
OIDC_OP_AUTHORIZATION_ENDPOINT = '../auth'
OIDC_OP_TOKEN_ENDPOINT = '../token'
OIDC_OP_USER_ENDPOINT = '../userinfo'
OIDC_OP_JWKS_ENDPOINT = '../certs'
OIDC_RP_SIGN_ALGO = ''  # RS256 or HS256 (check your provider)

# Keep this method or modify it. By default, the username is determined by hashing the email address
OIDC_USERNAME_ALGO = 'apprest.openidconnect.username_helper.generate_username'

# URL to the front end experiment page. After the user has authenticated, they will be redirected to this page in the
# frontend
REDIRECT_AFTER_OIDC_URL = 'http://frontend.fr/navigation'

# URL to the calipsoplus home page. After the user has logged out, they should be redirected here. (Does not require
# authentication)
LOGOUT_REDIRECT_URL = 'http://frontend.fr'
